---------
SILEX : 
------------------
Sommaire : 
INTRO : Qu'est-ce que Silex ? 
Etape 0 : Base de notre app : site_mvc (procédural)
ETAPE 1 : Installation de Silex
ETAPE 2 : Démarrage et compréhension 
ETAPE 3 : Le routing avec Silex
ETAPE 4 : Virtual Host
ETAPE 5 : HTACCESS : "On retire 'index.php'
ETAPE 6 : Démarrage de notre application BOUTIQUE
ETAPE 7 : Utilisation des services Silex (Doctine DBAL)
ETAPE 8 : Utilisation des services Silex(Twig)
ETPAE 9 : Utilisation des services Silex (Bootstrap)
ETPAE 10: Ajout des commentaires à nos produits (Injection de dépendance)
ETAPE 11: Le class DAO(design pattern : comment transformer un tableau multidimensionnel composé d'array, en un tableau dimensionnel composé d'objet)
ETAPE 12 : Héritage TWIG 
ETAPE 13: Gestion de la sécurité (Connexion)
ETAPE 14: Class MembreDAO et UserProviderInterface
ETAPE 15: Formulaire de connexion
ETAPE 16: Formulaire d'inscription 
ETPAE 17: Formulaire de contact
ETAPE 18: BACKOFFICE
ETAPE 19: Réorganisation en Controller
ETAPE 20: Prpéparation de la pise en prod. 


---------------------------------
INTRO : Qu'est-ce que Silex ? 


  1/ Avantages à utiliser un Framework ? 
  
   A/ Choix d'une organisation optimisée. Il est très difficile de conceptualiser soi-même une application en objet (un Framework maison). Où vont les controller? Les models? Les vues ? Aucune réponse n'est parfaite mais chacun à sa propre organisation cohérente...ou pas. 
    

  B/ Focntinnalités communes : Un framework permet de récupérer des briques déjà existantes.. et les récupérer du site A vers le site B etc.. (Briques : Connexion, inscription, session, commentaires..)

   
   C/ Services disponibles : Tous les frameworks proposent des services : Routage (Routing), la sécurité, la gestion du cache etc... 
Cela nous permet de nous concentrer et de passer plus de temps au développement de nos propres fonctionnalités. 



   2/ Quel choix de Framework ? 

  A/Son propre framework maison ? 
Très formateur !!On peut toujours l'améliorer et l'utiliser dans des projets persos... par contre : pas de communauté, pas de documentation et c'est difficile de grantir tous les aspects de sécurité. 

 

  B/Framework du marché : 

-Framework Fullstack (Zend, Symfony, Cake) : Beaucoup de services disponibles, grosses communautés, mais un déploiement très lourd et une architecture IMPOSEE. 

-Mini Framework (Laravel et Silex) : Proposent des services à la carte et une architecture plus souple.

 A/ Silex est un framework developpé par les équipes SensioLabs, qui sont les créateurs de Symfony. Il repose sur les mêmes composants. 

  
 
 B/On dit que Silex est un mini-framework , parfait pour l'apprentissage, et la compréhension de la logique Framework. Parfait également pour développer des applications rapidement et première étape intéressante dans l'apprentissage de Symfony. 


  



  B/Framework du marché : FullStack 






----------------------------------------------------
Etapae 0 : Base de notre app : site_mvc (procédural)
----------------------------------------------------
Pour commencer la compréhension de Silex, nous allons partir sur la base d'un morceau de site en procédural et en MVC afin d'avancer étape par étape : 


silex/site_mvc/ 
    - css/(copier de votre ancien site procédural)
    - photo/(copier de votre ancien site procédural)
    - index.php (vide)
    - model.php(vide)
    - view.php (vide)




Etape 1 : Installation de Silex 



Sommaire:  

1/Installation de composer 
2/Création du dossier BOUTIQUE 
3/ Commande pour télécharger les composants de Silex 
3.Bis : Autre technique pour télécharger les composants de silex
4/ tour d'horizon des composants.
-------------------------



1/Installation de Composer 

Composer est outil de gestion des dépendances. Il permet d'installer des services (composants, dépendances) et est relié à un fichier composer.json. 

-->Télécharger composer
--> Installer composer (en précisant php.exe)


2/ creation du dossier silex/BOUTIQUE/ 

3/ cOMMANDE POUR T2L2CHARGER LES COMPOSANTS DE SILEX / 
-> on se place dans le dossier BOUTIQUE/ 
-> Maj + clic droit > "Ouvrir la fenetre de commande ici" 


<cmd>

composer require silex/silex "~2.0"
  <code>
    { 
     "require": {
                "silex/silex": "~2.0"
                }
        }
      <cmd>
  composer update 


4/Les composants : 

Le dossier vendor correspond au coeur de notre framework. Il contient tous les composants récupérés de Silex/Symfony, sur lesquels nous n'intervidendrons jamais !!!

3.bis

----------------------------
ETAPE 2 : Démarrage et Compréhension 
------------------------------

Sommaire : 
1/Création du répertoire Web 
2/Création du fichier index.php 


1/repertoire web 

-> a la racine de notre application BOUTIQUE/web/
-> Ce dossier constitue notre repertoire web, cela signifie qu'il va contenir tout ce qui est visble et accessible pour l'internaute (index.php, photos, img, fonts, js, css...)


2/ creer web/index.php 

->d'abord on require l'autoload qui se chargera de require tous les fichiers dont on aura besoin.PRATIQUE !



-> On instancie la classe Application : L'objet $app va représenter notre application et nous donne accès à toutes les fonctionnalités de Silex. 

-> Méthode run() : Lancement de l'application.



---------------------------------
ETAPE 3 : Le routing sur Silex
--------------------------------

Sommaire : 

1/ Route Hello World 
2/ Route Hello {$name}
3/ La fonction Get de notre application 
4/ Arguments 
5/ fonction escape()
-----------------------



1/ Route Hello World 


 -> $app -> get() est la fonction qui nous permet de créer une nouvelle route. Chaque route est une action dans notre application. Ensuite nous rangerons toutes nos actions dans des controllers, pour optimiser notre organisation. 


2/Route Hello {$name}
  ->Creation de la route /hello/{name}
->Test : localhost/silex/BOUTIQUE/web/index.php/hello/Yannick


3/La fonction Get()
-> A chaque nouvelle fonctionnalité, on va utiliser la fonction get de $app, qui nous crée une nouvelle route. En plus de get, il existe post() et match(). Nous les verrons plus tard. 


4/Arguments: 
-> le premier argument est la nom de la route. Les paramètrres contenus dans les URL sont alors déclaré en {]
-> le second argument function{} est ce que l'on appelle une "closure" ou une "fonction anonyme". Elle signifie que ce qui va suivre sera executé. Une fonction dans une foction finalement. Elle peut recevoir les paramètrres dynamiques de notre URL (ex: function ($name)). 

5/ La méthode escape() 
 -> La fonction escape() permet simplement d'afficher le paramètre contenu dans la route.La méthode escape() permet d'éviter les injections SQL dans votre URL. 

-----------------------
ETAPE 4 : VIRTUAL HOST
------------------------

Sommaire : 

1/ Modifier le fichier vhost (apache) 
2/ Modifier le fichier conf (apache) 
3/Modifier le fichier host (system32)



1/mODIFICATION DU FICHIER VHOST / 
 >c:\xampp\apache\conf\extra\httpd-vhosts.conf

2/ Modification du fichier conf : 
> c:\xampp\apache\conf\httpd.conf

3/ Modification du fichier Hosts dans system 32
> c:\windows\system32\drivers\etc\hosts





-------------------------------------------
ETAPE 5 : HTACCESS POUR RETIRER INDEX.PHP :
-------------------------------------------
   
 -> Créer dans le dossier web de notre application, test.txt 

   
 <code>
    <IfModule mod_rewrite.c>
     
   Options -MultivViews
        
      
  RewriteEngine On
      
  RewriteCond %{REQUEST_FILENAME} !-f
       
  RewriteRule ^ index.php [QSA,L]
  
  </IfModule>

   
 -> Enregistrer le fichier avec l'extension .htaccess. 
Pour ce faire, selectionner tous les formats
    
   
 
Test à effectuer : www.boutique.dev/hello/yakine





--------------------------------------
ETAPE 6 : DEMARRAGE DE L'APPLICATION :
--------------------------------------  
  
Sommaire : 
1/ Création des dossiers

2/ Récupérer les fichiers (de notre base site_mvc)

3/ Création du fichier de routes

4/ Ré-écriture de index.php

--------------------------------------

1/ Création des dossiers :
   
 BOUTIQUE/    
      
  web/      (déjà créé)
      
  vendor/ (déjà crée)
    
    app/     (config de l'application)
      
  db/     (script de creation de la bdd)
     
   src/     (fichiers sources de notre application)
       
 views/     (les vues de notre application)

2/ Récupérer les fichiers (de notre base site_mvc)

Dans un premier temps on va gérer l'affichage de nos produits 

->model.php à copier/coller dans src/
->view.php à copier/coller dans views/
->css/photo/ à copier/coller dans web/


3/ Créer un fichier de route qui va contenir toutes nos routes 
 -> app/routes.php 
-> On re-crée ma route '/'(la home), dans laquelle on va récupérer les infos de tous nos produits (grâce à model.php et sa fonction afficheAll()) et on les affiche via le concept render() (temporisation puis affichage)


4/Ré-écriture de index.php 

 -> A ce stade, nous avons plus besoin des rotes écrutes dans index.php, mais on a besoin de require notre fichier de routes (routes.php)
 -> O ajoute le mode debug car nous sommes en dev.

Test: www.boutique.dev
A ce stade, npus devrions avoir la boutique qui s'affiche sur la home de notre nouveau site. 
en revanche, nous sommes en procédural... Il va donc falloir ajouter une couche OBJET. 




